buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://jitpack.io'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.dexman545:Outlet:master-SNAPSHOT'
    }
}

plugins {
    id 'fabric-loom' version '0.6-SNAPSHOT'
    id "com.github.fudge.forgedflowerloom" version "2.0.0"
    id 'maven-publish'
    id 'musical-code' version '1.2' // Compare MC versions for changes
    id "com.modrinth.minotaur" version "1.1.0"
    id 'com.matthewprenger.cursegradle' version '1.4.0'

    // To trigger musical code on project refresh and run processResources on project launch in Idea
    id "org.jetbrains.gradle.plugin.idea-ext" version "0.10"
}
apply plugin: 'dex.plugins.outlet'


import com.matthewprenger.cursegradle.CurseUploadTask
import com.modrinth.minotaur.TaskModrinthUpload
import groovy.json.JsonSlurper

import java.util.concurrent.TimeUnit

repositories {
    maven {
        url 'http://maven.terraformersmc.com/'
        name 'TerraFormersMC'
    }
    maven {
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.dexman545"
        }
    }
}

outlet.mcVersionRange = project.range

musicalCode {
    config 'musical-config.txt'
    output 'musical-code-output.txt'
    from getOldMcVersion(false)
    to "${project.minecraft_version}"
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

project.minecraft_version = outlet.latestMc()
project.modmenu_version = getLatestModMenu()
project.loader_version = outlet.loaderVersion()
project.yarn_mappings =  outlet.yarnVersion()
project.fabric_version = outlet.fapiVersion()

// Controls if optional deps. should be loaded at runtime via runClient
def useCompileOnlyDeps = false

configurations { //todo move into Outlet, change include to work differently
    optional {
        transitive = false
    }
    requiredModImpl {
        transitive = false
    }
    requiredModApi {
        transitive = false
    }
    requiredLib

    // Natural hierarchy is inverted for Gradle
    modCompileOnly.extendsFrom(optional)
    if (useCompileOnlyDeps) modRuntime.extendsFrom(optional)
    modImplementation.extendsFrom(requiredModImpl)
    implementation.extendsFrom(requiredLib)
    include.extendsFrom(requiredModApi, /*requiredModImpl,*/ requiredLib) // Disabled modImpl as modules depend on other modules
    modApi.extendsFrom(requiredModApi)
}

//noinspection SpellCheckingInspection
dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API.
    fapiModules().forEach {
        requiredModImpl(fabricApi.module(it, project.fabric_version))
    }

    // OWNER library
    requiredLib "org.aeonbits.owner:owner:1.0.10"

    // Autoswitch API
    requiredModApi 'com.github.dexman545:autoswitch-api:-SNAPSHOT'

    // Mod Compat ------------
    // ModMenu
    optional "com.terraformersmc:modmenu:${project.modmenu_version}"

}

/**
* Generate list of Fabric API modules based on fabric.mod.json
*/
Set<String> fapiModules() {
    def out = []
    project.sourceSets.main.resources.files.each {
        if (it.name == 'fabric.mod.json') {
            def modJson = new JsonSlurper().parse(it)
            out = modJson.depends.keySet().findAll { id ->
                (id as String).startsWith('fabric-')
            }
        }
    }
    return out
}

/*remapJar { //Disabled till loom 0.7 adds it. Planned for creating a standalone jar
    include configurations.requiredLib
}*/

processResources {
    inputs.property "version", project.version
    inputs.property "range", project.range

    filesMatching("fabric.mod.json") {
        expand "version": project.version, "range": project.range
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release.set(targetVersion)
    } else {
        it.sourceCompatibility = JavaVersion.toVersion(targetVersion)
        it.targetCompatibility = JavaVersion.toVersion(targetVersion)
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        //noinspection GroovyAssignabilityCheck
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            //noinspection GroovyAssignabilityCheck
            artifact(remapJar) {
                //noinspection GroovyAssignabilityCheck
                builtBy remapJar
            }
            //noinspection GroovyAssignabilityCheck
            artifact(sourcesJar) {
                //noinspection GroovyAssignabilityCheck
                builtBy remapSourcesJar
            }
        }
    }
}

static def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

def uniChangelog = "This is autopublished from Github Actions. Use at your own risk. See commit history or a release " +
        "build for changes. Based on commit: ${getCheckedOutGitCommitHash()}\n\n<br />" +
        "This build may work on Minecraft versions not specified for this version. Release cadence at time of writing " +
        "(2/12/2021):\n\n<br />" +
        "1.x.x -> 1.14-1.15 | 2.x.x -> 1.16.x | 3.x.x -> 1.16.x and 1.17.x (new config system)"

def tagPublishedCommit() {
    def doWork = true
    def tagName = "${getReleaseMonicker()}/${project.version}"

    def x = 'git tag'.execute()
    x.waitFor(10, TimeUnit.SECONDS)
    def lTag = ''
    x.inputStream.eachLine {
        if (tagName == it) {
            logger.info('Previously used tag in use, cancelling')
            doWork = false
        }
        if (it.contains(getReleaseMonicker())) lTag = it
        return
    }

    if (doWork) return ''

    def changelog = "\n\n<br /><br />Commit history from previous " + getReleaseMonicker() + ":\n"

    if (!lTag.empty) {
        runCommands("git log --pretty=reference ${lTag}..${tagName}".split(' ')).eachLine {
            changelog += '<br />' + it
        }
    } else {
        changelog = '\n\n<br /><br />Could not automatically generate changelog.'
    }

    return changelog
}

def log = ''

task publishModrinth(type: TaskModrinthUpload, dependsOn: build) {
    log = uniChangelog + tagPublishedCommit()

    token = System.getenv("MODRINTH")
    projectId = 'uSdcnlts'
    versionNumber = project.version
    uploadFile = jar.outputs.getFiles().asPath // This is the java jar task
    addLoader('fabric')
    versionName = "AutoSwitch $project.version (autopublished)"
    changelog = log
    releaseType = getReleaseMonicker()

    for (String ver : outlet.mcVersions()) {
        addGameVersion(ver)
    }

}

curseforge {
    if (System.getenv("CURSE")) {
        apiKey = System.getenv("CURSE")
    }

    project {
        id = '347405'
        changelog = log
        releaseType = getReleaseMonicker()

        outlet.curseforgeMcVersions().each {
            addGameVersion it.replace('1.17-Snapshot', '1.17') // Apparently curse is even more special
        }
        addGameVersion 'Fabric'

        changelogType = 'html'

        mainArtifact(remapJar) {
            displayName = "AutoSwitch $project.version (autopublished)"
        }

        relations {
            requiredDependency 'fabric'
        }

        afterEvaluate {
            uploadTask.dependsOn("remapJar").mustRunAfter(publishModrinth)
        }
    }

    options {
        forgeGradleIntegration = false
        //debug = true // Non-upload testing
    }
}

// Only publish to Curseforge for releases
// I intend for beta and alpha builds to be Modrinth exclusives
tasks.withType(CurseUploadTask) {
    onlyIf {
        "release" == getReleaseMonicker()
    }
}

/**
 * Get latest Mod Menu version from Fabric's maven. Not keyed to MC version.
 *
 * @return mod menu version.
 */
// I got tired of having to find the right version, ok?
static String getLatestModMenu() {
    def modMenuVersions = new XmlSlurper().parseText(
            new URL("https://maven.terraformersmc.com/com/terraformersmc/modmenu/maven-metadata.xml").text)
    return modMenuVersions.versioning.latest
}

/**
 * Get the type of release.
 * <p>
 * Used for publishing to distribution services.
 *
 * @return build release type, such as 'alpha', 'beta', or 'release'
 */
String getReleaseMonicker() {
    if (((String) project.version).contains('alpha')) return "alpha"
    if (((String) project.version).contains('beta')) return "beta"
    return "release"
}

// Fixes fabric.mod.template's variables not being replaced with Idea's run configs.
task fixResourcesLaunch(type: Copy) {
    String name = project.name.replace(" ", "_") + ".main"

    destinationDir file("${projectDir}/out/production/${name}")
    from processResources
}

idea.project.settings {
    taskTriggers {
        if (getOldMcVersion(true) != project.minecraft_version) {
            afterSync musicalCodeTask
        }
        afterBuild fixResourcesLaunch
    }
}

/**
 * @return old MC version from musical-code-data.properties for use in musical code
 */
String getOldMcVersion(boolean getNewMc) {
    Properties props = new Properties()
    File f = new File("${projectDir}/musical-code-data.properties")
    if (!f.exists()) f.newWriter().close()
    props.load(f.newDataInputStream())

    def currMC = props.get('currMC') as String
    def oldMC = props.get('oldMC') as String

    if (oldMC == null) props.setProperty('oldMC', "${project.minecraft_version}")
    if (currMC == null) {
        props.setProperty('currMC', "${project.minecraft_version}")
        currMC = project.minecraft_version
    }

    if (currMC != "${project.minecraft_version}") {
        props.setProperty('oldMC', currMC as String)
        props.setProperty('currMC', "${project.minecraft_version}")
    }

    props.store(f.newWriter(), null)

    if (getNewMc) return props.get('currMC') as String

    return props.get('oldMC') as String
}

// From https://stackoverflow.com/a/42691104
// Licensed under CC BY-SA 3.0
private static String runCommands(String... commands) {
    def process = new ProcessBuilder(commands).redirectErrorStream(true).start()
    process.waitFor()
    def result = ''
    process.inputStream.eachLine { result += it + '\n' }
    def errorResult = process.exitValue() == 0
    if (!errorResult) {
        throw new IllegalStateException(result)
    }
    return result
}

publish.finalizedBy(publishModrinth)
tasks.runClient.dependsOn(tasks.processResources)
